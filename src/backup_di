a#include "ft_printf.h"

void	putstr_printf(char *s, size_t len, t_data *data)
{
	len = ft_strlen(s) < len ? ft_strlen(s) : len;
	if (s)
	{
		write(1, s, len);
		data->char_count += len;
	}
}

void	putchar_printf(char c, t_data *data)
{
	write(1, &c, 1);
	data->char_count++;
}

void	putnbr_printf(int n, t_data *data)
{
	unsigned int s;

	s = 0;
	if (n >= 0)
		s = n;
	if (n < 0)
	{
		s = n * -1;
		putchar_printf('-', data);
	}
	if (s > 9)
		putnbr_printf(s / 10, data);
	putchar_printf((s % 10) + '0', data);
}

void		calc_field_width(t_data *data)
{
	if (data->type == 'd' || data->type == 'i')
		data->width = data->width > nlen(data->arg.li) ? 
			data->width : nlen(data->arg.li);
	if (data->type == 'x' || data->type == 'X')
	{
		data->width = data->width > nlen(data->arg.lu) ?
			data->width : nlen(data->arg.lu);
		data->width = data->width > data->precision? data->width : data->precision;
	}
	if (data->type == 's')
	{
		if ((int)ft_strlen(data->arg.vp) > data->precision 
			&& data->precision >= 0)
		{
			data->width -= data->precision < (int)ft_strlen(data->arg.vp) ? 
				data->precision : ft_strlen(data->arg.vp);
			}
		else
			data->width -= ft_strlen(data->arg.vp);
	}
}

void    	print_width_hex(t_data *data)
{
	char	fill;
	int		len;

	fill = ' ';
	if (data->type == 'd' || data->type == 'i')
		len = nlen(data->arg.li);
	if (data->type == 'x' || data->type == 'X')
		len = ft_strlen(ft_itoa_base(data->arg.lu, 16, 'a'));
	if (data->precision > len && !data->flag_zero)
		fill = '0';
	if (data->flag_zero && !data->flag_minus && 
	!(data->precision >= 0))
		fill = '0';
	while (data->width > len)
	{
		putchar_printf(fill, data);
		len++;
	}
}

void    	print_li(t_data *data)
{
	int		len;
	int		field_width;
	char	fill;

	fill = data->flag_zero && data->precision < 0 ? '0' : ' ';
	len = nlen(data->arg.li);
	if (data->arg.li < 0)
	{
		print_li_neg(data);
		return ;	
	}
	field_width = data->width > data->precision ? 
		data->width : data->precision;
	data->precision = data->precision > len ?
		data->precision : len;
	while (field_width > data->precision)
	{
		putchar_printf(fill, data);
		field_width--;
	}
	while (field_width > len)
	{
		putchar_printf('0', data);
		field_width--;
	}
	putnbr_printf(data->arg.li, data);
}


void		print_li_neg_zero_prec(t_data *data)
{
	int		len;
	int		field_width;

	field_width = data->width;
	len = nlen(data->arg.li);
	putchar_printf('-', data);
	while (data->precision > len)
	{
		putchar_printf('0', data);
		data->precision--;
	}
	putnbr_printf(data->arg.li, data);	
}

void		print_li_neg_zero(t_data *data)
{
	int		len;
	int		field_width;

	data->arg.li *= -1;
	len = nlen(data->arg.li) > data->precision ?
		nlen(data->arg.li) : data->precision;
	field_width = data->width - 1;
	if (data->precision >= data->width)
	{
		print_li_neg_zero_prec(data);
		return ;
	}
	putchar_printf('-', data);
	while (field_width > len)
	{
		putchar_printf('0', data);
		field_width--;
	}
	while (field_width > nlen(data->arg.li))
	{
		putchar_printf('0', data);
		field_width--;
	}
	putnbr_printf(data->arg.li, data);	
}

/*
** bug fix: precision includes just digits, width includes all characters printed (so if precision > width, the length of the output is the precision + 1)
**																					  if width > precision, the length of the output is the width
*/

void    	print_li_neg(t_data *data)
{
	int		len;
	int		field_width;

	if (data->flag_zero && data->precision < 0)
	{
		print_li_neg_zero(data);
		return ;
	}
	if (data->precision >= data->width)
	{
		print_li_neg_prec(data);
		return ;
	}
	data->arg.li *= -1;
	len = nlen(data->arg.li) > data->precision ?
		nlen(data->arg.li) : data->precision;
	field_width = data->width - 1;
	while (field_width > len)
	{
		putchar_printf(' ', data);
		field_width--;
	}
	putchar_printf('-', data);
	while (field_width > nlen(data->arg.li))
	{
		putchar_printf('0', data);
		field_width--;
	}
	putnbr_printf(data->arg.li, data);
}

void		print_li_neg_prec(t_data *data)
{
	int		len;
	int		field_width;

	field_width = data->width;
	len = nlen(data->arg.li);
	data->arg.li *= -1;
	putchar_printf('-', data);
	while (data->precision > len - 1)
	{
		putchar_printf('0', data);
		data->precision--;
	}
	putnbr_printf(data->arg.li, data);
}

void		print_li_min(t_data *data)
{
	char	fill;
	int		len;
	int		field_width;

	field_width = data->width;
	fill = ' ';
	len = nlen(data->arg.li);
	if(data->arg.li >= 0)
	{
		while (field_width + data->precision > data->width + len)
		{
			putchar_printf('0', data);
			field_width--;
		}
		putnbr_printf(data->arg.li, data);
		while (field_width > len)
		{
			putchar_printf(fill, data);
			field_width--;
		}
	}
	else
		print_li_min_neg(data);
}

void		print_li_min_neg(t_data *data)
{
	int		len;
	int		field_width;

	field_width = 0;
	data->arg.li *= -1;	
	len = nlen(data->arg.li);
	putchar_printf('-', data);
	while (field_width < data->precision - len)
	{
		putchar_printf('0', data);
		field_width++;
	}
	putnbr_printf(data->arg.li, data);
	while (field_width < data->width - len - 1)
	{
		putchar_printf(' ', data);
		field_width++;
	}
}